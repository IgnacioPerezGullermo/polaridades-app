// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
}

generator client {
    provider = "prisma-client-js"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Producto {
    id            String          @id @default(cuid())
    code          Int
    name          String
    price         Int
    description   String?
    thumbnail     String?
    image         String?
    category      Categorias      @relation(fields: [categoriasId], references: [id])
    stock         Int?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now())
    Opcion        Opcion[]
    categoriasId  String
    DetallePedido DetallePedido[]
}

model Opcion {
    id         String   @id @default(cuid())
    name       String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())
    product    Producto @relation(fields: [productoId], references: [id])
    productoId String
}

model Categorias {
    id          String     @id @default(cuid())
    name        String
    description String?
    thumbnail   String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @default(now())
    Producto    Producto[]
}

model DetallePedido {
    id         String   @id @default(cuid())
    pedido     Pedido   @relation(fields: [pedidoId], references: [id])
    pedidoId   String
    producto   Producto @relation(fields: [productoId], references: [id])
    productoId String
    price      Int
    quantity   Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @default(now())
}

model Pedido {
    id            String          @id @default(cuid())
    amount        Int
    total         Int
    DetallePedido DetallePedido[]
    mesa          Mesa            @relation(fields: [mesaId], references: [id])
    mesaId        String
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @default(now())
}

model Mesa {
    id             String   @id @default(cuid())
    name           String
    clients        Int
    currentClients Int?     @default(0)
    Pedido         Pedido[]
    closed         Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now())
}
